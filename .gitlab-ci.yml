stages:
  - service-java
  - service-python
  - build-and-deploy

# Création des dossiers pour la mise en cache du runner
cache:
  paths:
    - .m2/repository 
    - service-java/service-java-main/target/
    - venv/

# Définition des variables Maven pour optimiser la mise en cache.
variables:
  MAVEN_XML_PATH: "service-java/service-java-main/pom.xml" # emplacement du pom.xml principal
  MAVEN_REPOSITORY: "-Dmaven.repo.local=.m2/repository" # un répertoire local de dépendances
  DOCKER_HOST: "tcp://docker:2375"
  DOCKER_TLS_CERTDIR: ""


  

service-java:
  
  stage: service-java
  image: maven:3.9.9-eclipse-temurin-23-alpine

  script:
    - echo "Compilation du projet..."
    - mvn compile -f $MAVEN_XML_PATH $MAVEN_REPOSITORY # récupère les dépendances dans le cache ou bien stockent les dépendances lors de la première execution
    - echo "Exécution des tests"
    - mvn test -f $MAVEN_XML_PATH $MAVEN_REPOSITORY

   
    

service-python:
  
  stage: service-python
  image: python:3.8-slim

  before_script:
    - apt-get update && apt-get install -y build-essential python3-dev
    - python -m venv venv
    - source venv/bin/activate
    - cd ./service-python/service-python-main
    - pip install -r requirements.txt 
    
  script:
    - echo "Exécution des tests"
    - python test_app.py

build-and-deploy:
  stage: build-and-deploy
  image: docker:24.0.2
  
  services:
    - docker:24.0.2-dind
  
  before_script:
    - apk add --no-cache curl bash py3-pip
    - pip install azure-cli
    - curl -fsSL https://releases.hashicorp.com/terraform/1.7.5/terraform_1.7.5_linux_amd64.zip -o terraform.zip
    - unzip terraform.zip
    - mv terraform /usr/local/bin/
    - terraform --version

    - az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
    - az account set --subscription "$ARM_SUBSCRIPTION_ID"
    - az account show

    - cd ./terraform

  script:
    - echo "Création de l'infra"
    - terraform init
    - terraform validate
    - terraform apply

    - echo "Déploiement de l'infra sur Azure"

    - az acr login --name $ACR_LOGIN_SERVER

    - echo "Build et push de l'image service-java"
    - docker build -t $ACR_LOGIN_SERVER/service-java:latest ./service-java/service-java-main
    - docker push $ACR_LOGIN_SERVER/service-java:latest


    - echo "Build et push de l'image service-python"
    - docker build -t $ACR_LOGIN_SERVER/service-python:latest ./service-python/service-python-main
    - docker push $ACR_LOGIN_SERVER/service-python:latest









stages:
  - service-java
  - service-python
  - build-and-deploy
# Création des dossiers pour la mise en cache du runner
cache:
  paths:
    - .m2/repository 
    - service-java/service-java-main/target/
    - service-python/service-python-main/coverage.xml
    - venv/
    - service-java/service-java-main/target/site/jacoco/

# Définition des variables Maven pour optimiser la mise en cache.
variables:
  MAVEN_XML_PATH: "service-java/service-java-main/pom.xml" # emplacement du pom.xml principal
  MAVEN_REPOSITORY: "-Dmaven.repo.local=.m2/repository" # un répertoire local de dépendances
 


  

service-java:

  stage: service-java
  image: maven:3.9.9-eclipse-temurin-23-alpine

  script:
    - echo "Compilation du projet..."
    - mvn compile -f $MAVEN_XML_PATH $MAVEN_REPOSITORY # récupère les dépendances dans le cache ou bien stockent les dépendances lors de la première execution
    - echo "Exécution des tests"
    - mvn test -f $MAVEN_XML_PATH $MAVEN_REPOSITORY
    - mvn test jacoco:report -f $MAVEN_XML_PATH $MAVEN_REPOSITORY

sonarqube-java:
  stage: service-java
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - cd service-java/service-java-main
    - sonar-scanner -Dsonar.host.url=http://sonarqube:9000 -Dsonar.login=$SONAR_TOKEN



  
    

service-python:
  
  stage: service-python
  image: python:3.8

  before_script:

    - python -m venv venv
    - source venv/bin/activate
    - cd ./service-python/service-python-main
    - pip install -r requirements.txt 
    - pip install coverage
    - coverage run test_app.py
    - coverage xml -o coverage.xml
    
  script:
    - echo "Exécution des tests"
    - coverage run test_app.py
    - coverage xml -o coverage.xml
  
sonarqube-python:
  stage: service-python
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - cd service-python/service-python-main
    - sonar-scanner -Dsonar.host.url=http://localhost:9000 -Dsonar.login=$SONAR_TOKEN


build-and-deploy:
  stage: build-and-deploy
  image: docker:24.0.2

  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  
  services:
    - docker:24.0.2-dind

  
  dependencies:
    - service-java
    - service-python
  
  before_script:
     - echo "Connexion au registry Docker"
     - echo $REGISTRY_PASSWORD | docker login $REGISTRY_URL -u $USERNAME --password-stdin
     - docker --version
 

  script:

    - echo "Déploiement des images sur le registre Azure"


    - echo "Build et push de l'image service-java"
    - docker build -t $REGISTRY_URL/service-java:latest ./service-java/service-java-main
    - docker push $REGISTRY_URL/service-java:latest


    - echo "Build et push de l'image service-python"
    - docker build -t $REGISTRY_URL/service-python:latest ./service-python/service-python-main
    - docker push $REGISTRY_URL/service-python:latest








